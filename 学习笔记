学习笔记
实验4   DNS
【实验目的】
1.	深入理解域名系统（DNS）的作用、层级结构以及与 IP 子网的关系。
2.	深入理解递归查询和迭代查询这两种域名解析方式的工作原理，并通过实际操作和分析，清晰掌握它们之间的区别。
3.	学会使用 nslookup 命令进行域名查询，理解其用法和功能。
4.	掌握使用 Wireshark 工具对 DNS 查询过程进行抓包和分析，熟悉相关过滤条件的设置。

【实验环境】
1.	硬件环境：普通计算机一台，具备网络连接功能。
2.	软件环境：Windows 或 Mac OS 操作系统，安装 Wireshark 软件。

【实验内容】
（一）使用 nslookup 命令查询域名的 IP 地址
1.	打开命令提示符（Windows 系统）或终端（Mac OS 系统）。
2.	在命令行中输入 “nslookup”，进入 nslookup 交互模式。此时，命令行提示符会变为 “>”。
3.	在 “>” 提示符后输入要查询的域名（注意不能选择北京语言大学官网域名 “blcu.edu.cn” 和百度官网域名 “baidu.com” ），例如 “www.sina.com”，然后按下回车键。观察命令行输出的结果，记录下查询到的 IP 地址、服务器信息等内容。注意结果中 “非权威应答” 的含义，它表示该查询结果可能不是来自于授权域名服务器，可能存在缓存等情况。
4.	退出 nslookup 交互模式，在命令行中输入 “exit” 并回车。
5.	使用 nslookup 的非交互模式进行查询。在命令行中直接输入 “nslookup 要查询的域名”，如 “nslookup www.qq.com”，观察并记录输出结果，对比交互模式和非交互模式查询结果的差异。
（二）使用 Wireshark 捕捉 DNS 过程
1.	打开 Wireshark 软件。在 Wireshark 的主界面中，选择用于连接互联网的网络接口（如以太网、Wi-Fi 等），点击 “开始捕获” 按钮，开始捕捉网络数据包。
2.	在浏览器地址栏中输入一个域名（如 “www.sohu.com”）并访问该网站。此时，Wireshark 会捕捉到与该域名访问相关的网络数据包。
3.	访问完成后，在 Wireshark 界面中点击 “停止捕获” 按钮，停止数据包的捕捉。
（三）使用合适的过滤条件过滤得到 DNS 查询数据包
1.	在 Wireshark 的 “应用显示过滤器” 文本框中输入 “dns”，然后按下回车键。此时，Wireshark 界面将只显示与 DNS 相关的数据包，方便观察和分析 DNS 查询过程。观察 DNS 查询数据包的结构，包括源 IP 地址、目的 IP 地址、查询类型（如 A 记录查询）等信息。
2.	使用更具体的过滤条件进行筛选。例如，输入 “ip.src == 192.168.1.100 and dns”（假设本地计算机的 IP 地址为 192.168.1.100），可以筛选出本地计算机发出的 DNS 查询数据包；输入 “dns.qry.name == www.sina.com.cn”，可以筛选出对 “www.sina.com.cn” 域名的查询数据包。
3.	分析 DNS 查询和响应的过程。找到 DNS 查询数据包和对应的响应数据包，观察它们之间的时间间隔、查询内容和响应结果。注意查看响应数据包中的 IP 地址，确认其是否与之前使用 nslookup 命令查询到的 IP 地址一致。
4.	尝试使用逻辑运算符组合过滤条件。如输入 “(ip.src == 192.168.1.100 or ip.dst == 192.168.1.100) and dns”，可以筛选出本地计算机参与的 DNS 相关数据包。
（四）探究递归查询和迭代查询的差异
1.	准备工作：打开 Wireshark 软件，选择用于连接互联网的网络接口，点击 “开始捕获” 按钮，开始捕捉网络数据包。
2.	触发递归查询：打开命令提示符（Windows 系统）或终端（Mac OS 系统），在命令行中输入 nslookup -type=A  www.example.com （“www.example.com” 可替换为任意一个不常用且能正常解析的域名）。由于 nslookup 默认使用递归查询方式，此时 Wireshark 会捕获到相关的 DNS 查询和响应数据包。停止 Wireshark 的数据包捕获，在 Wireshark 界面的 “应用显示过滤器” 文本框中输入 “dns”，筛选出 DNS 相关数据包。
3.	分析递归查询数据包：在筛选后的 DNS 数据包中，观察本地域名服务器与其他域名服务器之间的交互过程。可以看到本地域名服务器向根域名服务器发送查询请求，根域名服务器返回顶级域名服务器的地址，本地域名服务器再向顶级域名服务器发送查询请求，以此类推，直到获取到目标域名的 IP 地址。注意记录每次查询请求和响应的源 IP 地址、目的 IP 地址、查询类型以及时间戳等信息。分析递归查询过程中，本地域名服务器是否直接向其他各级域名服务器依次查询，还是等待一个域名服务器返回最终结果。观察整个查询过程中数据包的数量和交互顺序，理解递归查询中本地域名服务器承担的角色和工作方式。
4.	触发迭代查询：部分操作系统的 nslookup 命令支持通过设置参数进行迭代查询。在命令提示符或终端中尝试输入 “nslookup -type=A  -retry=1 www.example.com”（不同系统参数设置可能不同，若此命令不生效可查阅相关资料获取对应系统的正确设置方式），使用这种方式触发迭代查询。再次打开 Wireshark 进行数据包捕获，操作完成后停止捕获，并使用 “dns” 过滤器筛选出 DNS 相关数据包。
5.	分析迭代查询数据包：同样在筛选后的数据包中，观察本地域名服务器与其他域名服务器的交互。与递归查询不同，迭代查询时本地域名服务器会依次向各级域名服务器发送查询请求，并根据返回的结果决定下一次查询的目标。分析迭代查询过程中，本地域名服务器每次收到的响应内容，判断其是最终的 IP 地址还是下一个要查询的域名服务器地址。对比迭代查询和递归查询中数据包的交互次数、查询路径以及每次查询的响应时间，总结迭代查询的特点。
6.	对比总结：将递归查询和迭代查询的数据包分析结果进行对比。从查询过程来看，递归查询中本地域名服务器会持续查询直到获取最终 IP 地址，而迭代查询是由本地域名服务器根据每次的响应自行决定下一步查询的域名服务器；从数据包数量和交互顺序上，递归查询的交互相对更有顺序性，而迭代查询的交互更分散；从查询效率上，结合响应时间分析哪种查询方式在获取 IP 地址时更快，思考在不同网络环境和查询场景下，两种查询方式的优劣。
（五）实验拓展

1.	深入分析 DNS 记录类型：在 Wireshark 中，除了查看 A 记录的查询和响应，还可以分析其他类型的 DNS 记录，如 NS 记录、CNAME 记录等。尝试构造相应的查询条件，观察不同类型记录的查询和响应过程，理解其在域名解析中的作用。
2.	对比不同网络环境下的 DNS 解析：在不同的网络环境（如家庭网络、学校网络、移动网络等）中重复上述实验，对比不同网络环境下 DNS 查询的速度、解析结果以及可能出现的差异，分析其原因。


